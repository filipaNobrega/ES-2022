@page "/"
@page "/shoppinglist"

@inject CommandManager CommandManager;

<PageTitle>Shopping List</PageTitle>

<h1>My Shopping List</h1>

<div class="btn-group mb-2">
    <button class="btn btn-secondary" disabled="@(!canUndo)" @onclick="Undo">
        <span class="oi oi-action-undo" aria-hidden="true"></span> Undo
    </button>
    <button class="btn btn-secondary" disabled="@(!canRedo)" @onclick="Redo">
        <span class="oi oi-action-redo" aria-hidden="true"></span> Redo
    </button>
</div>

<div class="text-dark">@items.Count(i => !i.IsBought) items</div>

<form @onsubmit="AddItem">
    <input class="form-control" type="text" @bind="newItem" placeholder="Add item" />
</form>

<ul class="list-unstyled mt-2">
    @for (int i = 0; i < items.Count; i++)
    {
        var j = i;
        <li class="list-item">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="item-@j" checked="@items[j].IsBought"
                @onchange="(args) => OnCheckedChanged(items[j], args.Value)" />
                <label class="form-check-label" for="item-@j">@items[j].Title</label>
            </div>
            <div>
                <button class="btn btn-secondary btn-sm" aria-label="Edit" @onclick="() => OpenEditModalDialog(items[j])">
                    <span class="oi oi-pencil" aria-hidden="true"></span>
                </button>
                <button class="btn btn-danger btn-sm" aria-label="Delete" @onclick="() => DeleteItem(items[j])">
                    <span class="oi oi-trash" aria-hidden="true"></span>
                </button>
            </div>
        </li>
    }
</ul>

@if (isEditModalDialogOpened)
{
    <ModalDialog Title="Edit item" FormId="edit" OnCancel="@CloseEditModalDialog" DialogType="ModalDialog.ModalDialogType.SaveCancel">
        <EditForm id="edit" Model="@itemEditModel" OnSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <label class="col-sm-2 col-form-label" for="title">Title</label>
                <div class="col-sm-10">
                    <InputText id="title" class="form-control" @bind-Value="itemEditModel.Title" />
                </div>
            </div>
        </EditForm>
    </ModalDialog>
}

@code {
    private List<ListItem> items = new();
    private string? newItem;
    private bool canUndo;
    private bool canRedo;
    private bool isEditModalDialogOpened;
    private ListItemEditModel? itemEditModel;
    private ListItem? itemToEdit;

    private void Undo() => CommandManager.Undo();
    private void Redo() => CommandManager.Redo();
    private void AddItem()
    {
        if (string.IsNullOrEmpty(newItem)) return;
        var macro = new MacroCommand();
        var command1 = new CommandCreateListItem(newItem);
        command1.Execute();
        macro.Add(command1);
        var command2 = new CommandAddListItem(items, command1.Item);
        macro.Add(command2);
        CommandManager.Execute(macro);
        newItem = null;
    }
    private void DeleteItem(ListItem item)
    {
        if (item == null) return;
        var command1 = new CommandDeleteListItem(items, item);
        CommandManager.Execute(command1);
    }
    private void OnCheckedChanged(ListItem item, object? value)
    {
        if (item == null) return;
        if (value == null) return;
        var command1 = new CommandModifyIsBought(item, (bool)value);
        CommandManager.Execute(command1);
    }
    private void OpenEditModalDialog(ListItem item)
    {
        itemToEdit = item;
        itemEditModel = new ListItemEditModel() { Title = item.Title };
        isEditModalDialogOpened = true;
    }
    private void CloseEditModalDialog()
    {
        isEditModalDialogOpened = false;
        itemToEdit = null;
        itemEditModel = null;
    }
    private void HandleSubmit(EditContext ctx)
    {
        if (ctx.Validate())
        {
            var command1 = new CommandModifyTitle(itemToEdit, itemEditModel.Title);
            CommandManager.Execute(command1);
            CloseEditModalDialog();
        }
    }
    protected override void OnInitialized()
    {
        CommandManager.Reset();
        CommandManager.Notify += (s, e) =>
        {
            canUndo = CommandManager.HasUndo;
            canRedo = CommandManager.HasRedo;
        };
    }
}
